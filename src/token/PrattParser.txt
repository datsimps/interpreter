2.7 how pratt parsing works





let input = "1 + 2 + 3;".to_string();
Parse_expression(input, prec::Lowest);

cur_token: 1; peek_token: +;
prefix_parser: checks cur_token{1}.
prefix_parser returns expression = literal::int(1);i

while loop checks peek_token: {+} is not a semicolon and prec: {lowest} is lower
    than peek_prec(peek_token) = true;
    so enters the loop

infix_parser: checks peek_token{+}.
creates the infix operator,
checks the prec level of cur_token: {literal::int(1)} = Prefix (lowest is lower than prefix),
moves passed infix operator: {+} to {2},
infix_parser returns:
(left expression: literal::int(1) InfixOp: (+) right expression{Parse_expression("2 + 3;", prec)}
cur_token: 2; peek_token: +;

prefix_parser: checks cur_token{2}.
prefix_parser returns expression = literal::int(2);

//this is the inner while loop now
while loop checks peek_token: {+} is not a semicolon = true; and prec: {prefix} is lower 
    than peek_prec(peek_token) = false;
    skips loop

returns literal::int(2)

so far our expression = (literal::int(1) InfixOp: (+) literal::int(2))
move tokens forward
cur_token: 2; peek_token: +;
// still in first while loop
infix_parser: checks peek_token{+}.
creates the infix operator,
check the prec level of the cur_token: {literal::int(2)} = Prefix (lowest is still lower),
moves tokens passed infix: {+} to {3},
infix returns:
(left expression: (literal::int(1) InfixOp: (+) literal::int(2)) InfixOp: (+) righ expression {
    Parse_expression("3", prec)}

prefix_parser: checks cur_token{3}.
prefix_parser returns expression = literal::in(3);

skips while loop = peek_token = {;}

returns literal::int(3)
move tokens forward
cur_token: 3; peek_token: (;);

now expression = 
((1 + 2) + 3)

while loop checks if peek_token is (;) it is so it skips while loop
    the check will return lowest for end of line characters as well so it 
    will cancel the loop even without the semicolon

returning completed expression
((1 + 2) + 3)
